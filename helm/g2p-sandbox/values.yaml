global:
  SPRING_PROFILES_ACTIVE: "bb"
  imagePullPolicy: "Always"
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_PATTERN_CONSOLE: "%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n"
  tenants: "rhino,gorilla,wakanda,pluto,venus,jupiter"
  DFSPIDS: "wakanda,pluto,venus,jupiter"
  bucket_name: paymenthub-ee
  region: "ap-south-1"
  s3BaseUrl: "http://minio:9000"
  max_execution_threads: 50
  poll_interval: 10

ingress:
  apiversion: "networking.k8s.io/v1"

deployment:
  apiversion: "apps/v1"

service:
  apiversion: "v1"

secret:
  apiversion: "v1"

configmap:
  apiversion: "v1"

operations:
  enabled: true

channel:
  fullnameOverride: "ph-ee-connector-channel"
  enabled: true
  image: docker.io/openmf/ph-ee-connector-channel:v1.11.0
  hostname: "channel.sandbox.mifos.io"
  stub_hostname: "channel-gsma.sandbox.mifos.io"
  SPRING_PROFILES_ACTIVE: "bb,tenants"
  tenantPrimary:
    clientId: "mifos"
    clientSecret: "password"
    tenant: "rhino"
  tenantSecondary:
    clientId: "mifos"
    clientSecret: "password"
    tenant: "gorilla"
  server:
    ssl:
      keyPassword: "password"
      keyStorePassword: "password"
  ingress:
    enabled: false
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: channel.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-connector-channel"
                port:
                  number: 8443
      - host: channel-gsma.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-connector-channel-gsma"
                port:
                  number: 82
    path: "/channel"
    annotations: { }
    backend: { }
    stub_backend: { }

  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the channel Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as ph-ee-connector-channel.yml for deployment
    # ph-ee-connector-channelConfig: {}
    #   ph-ee-connector-channel.yml: |

  replicas: 1
  imagePullPolicy: "Always"
  TRANSACTION_ID_LENGTH: 20
  gsma_payee_tenant: ""
  redis:
    host: "127.0.0.1"
    port: 6379
    password: ""
    idempotency:
      enabled: true
      keyFormat: "clientCorrelationId_tenant_api"
      apiList: "/channel/transfer,/channel/collection,/channel/gsma/transaction,/channel/transactionRequest"
  operations:
    url: "http://ph-ee-operations-app:80/api/v1"
    authEnabled: false

  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8443
      scheme: HTTPS
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8443
      scheme: HTTPS
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: "channel"
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for channel pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for channel container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-connector-channelConfig: ""
  #   ph-ee-connector-channel: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the channel Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  service:
    annotations: {}
  # Enabling this will publicly expose your channel instance.
  # Only enable this if you have security enabled on your cluster

kafka:
  enabled: true
  fullnameOverride: kafka

  provisioning:
    enabled: true
    topics:
      - name: zeebe-export
        partitions: 1
        replicationFactor: 1

  controller:
    replicaCount: 1

  listeners:
    client:
      protocol: PLAINTEXT

    controller:
      protocol: PLAINTEXT

    interbroker:
      protocol: PLAINTEXT

    external:
      protocol: PLAINTEXT

  kraft:
    clusterId: spDnn4oSr6DLKPx3cEheLp

  # externalAccess:
  #   enabled: true
  #   autoDiscovery:
  #     enabled: true

  # rbac:
  #   create: true

  extraConfig: |
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1    

redis:
  enabled: true
  replica:
    replicaCount: 1

zeebe_ops:
  enabled: true
  image: docker.io/openmf/ph-ee-zeebe-ops:v1.2.0
  global:
    elasticsearch:
      host: "ph-ee-elasticsearch"
      clusterName: "ph-ee-elasticsearch"
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
    path: /
    host: operate.sandbox.mifos.io
    tls:
      enabled: true
    backend: { }
  replicas: 1
  imagePullPolicy: "Always"
  imagePullSecrets: []
  elasticsearch_contactpoint: "ph-ee-elasticsearch:9200"
  elasticsearch_url: "http://ph-ee-elasticsearch:9200/"
  elasticsearch_sslverification: false
  elasticsearch_security_enabled: false
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for Zeebe-ops pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for Zeebe-ops container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-zeebe-opsConfig: ""
  #   ph-ee-zeebe-ops.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the Zeebe-ops Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  # Enabling this will publicly expose your zeebe_ops instance.
  # Only enable this if you have security enabled on your cluster

  deployment:
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    extraEnvs: []
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the zeebeops Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as zeebeops.yml for deployment
    # ph-ee-zeebe-opsConfig: {}
    #   ph-ee-zeebe-ops.yml: |

elasticsearch:
  enabled: true
  #Single Node Solution
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=100s"
  protocol: http
  master:
    readinessProbe:
      httpGet:
        allow-insecure: true
        username: elastic
        password: "{{ .Env.ELASTIC_PASSWORD }}"
        path: /_cluster/health?wait_for_status=yellow&timeout=5s
        port: 9200
      initialDelaySeconds: 30
  data:
    readinessProbe:
      httpGet:
        allow-insecure: true
        username: elastic
        password: "{{ .Env.ELASTIC_PASSWORD }}"
        path: /_cluster/health?wait_for_status=yellow&timeout=5s
        port: 9200
      initialDelaySeconds: 30
  # Shrink default JVM heap.
  esJavaOpts: "-Xmx512m -Xms512m"
  # Allocate smaller chunks of memory per pod.
  resources:
    requests:
      cpu: "100m"
      memory: "1024M"
    limits:
      cpu: "1000m"
      memory: "1024M"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "gp2"
    resources:
      requests:
        storage: 10Gi

  # imageTag: 7.17.1
  replicas: 1
  fullnameOverride: "ph-ee-elasticsearch"
  clusterName: "ph-ee-elasticsearch"
  minimumMasterNodes: 1
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: false
      xpack.security.transport.ssl.enabled: false
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.enabled: false
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password

kibana:
  enabled: true
  readinessProbe:
    initialDelaySeconds: 45
    timeoutSeconds: 15
    successThreshold: 1
  protocol: http
  ingress:
    enabled: false
    className: "nginx"
    pathtype: "Prefix"
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: analytics.sandbox.mifos.io
        paths:
          - path: /
    #tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  imageTag: 7.16.3
  fullnameOverride: "ph-ee-kibana"
  elasticsearchHosts: "http://ph-ee-elasticsearch:9200/"
  kibanaConfig:
    kibana.yml: |
      monitoring.enabled: false
      xpack.encryptedSavedObjects.encryptionKey: 5f4dcc3b5aa765d61d8327deb882cf99
      server.ssl:
        enabled: false
        key: /usr/share/kibana/config/certs/elastic-certificate.pem
        certificate: /usr/share/kibana/config/certs/elastic-certificate.pem
      xpack.security.encryptionKey: ${KIBANA_ENCRYPTION_KEY}
      elasticsearch.ssl:
        certificateAuthorities: /usr/share/kibana/config/certs/elastic-certificate.pem
        verificationMode: certificate
  secretMounts:
    - name: elastic-certificate-pem
      secretName: elastic-certificate-pem
      path: /usr/share/kibana/config/certs
  extraEnvs:
    - name: 'ELASTICSEARCH_USERNAME'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
    - name: 'ELASTICSEARCH_PASSWORD'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: 'KIBANA_ENCRYPTION_KEY'
      valueFrom:
        secretKeyRef:
          name: kibana
          key: encryptionkey

ph_ee_connector_ams_mifos:
  enabled: true
  image: docker.io/openmf/ph-ee-connector-ams-mifos:v1.7.0
  SPRING_PROFILES_ACTIVE: "fin12,bb"
  ams_local_enabled: true
  ams_local_interop_host: "https://fynams.sandbox.mifos.io/"
  ams_local_account_host: "https://fynams.sandbox.mifos.io/"
  ams_local_customer_host: "https://fynams.sandbox.mifos.io/"
  ams_local_auth_host: "https://fynams.sandbox.mifos.io/"
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: ams-mifos.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: ph-ee-connector-ams-mifos
                port:
                  number: 80
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    replicas: 1
    image: docker.io/openmf/ph-ee-connector-ams-mifos:v1.3.0
    imagePullPolicy: "Always"
    ams_local_enabled: true
    ams_local_interop_host: "fineract-server"
    ams_local_account_host: "fineract-server"
    ams_local_customer_host: "fineract-server"
    ams_local_auth_host: "fineract-server"
    ams_local_tenants: ""
    ams_local_loan_host: ""
    # Whether this chart should self-manage its service account, role, and associated role binding.
    managedServiceAccount: true
    # Custom service account override that the pod will use
    serviceAccount: ""
    # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
    serviceAccountAnnotations: { }
    # How long to wait for ams-mifos pods to stop gracefully
    terminationGracePeriod: 180
    # Extra environment variables for ams-mifos container.
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # This is the PriorityClass settings as defined in
    # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    priorityClassName: ""
    # ph-ee-connector-ams-mifosConfig: ""
    #   ph-ee-connector-ams-mifos.yml: |
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the ams-mifos Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "384M"
        cpu: "500m"
      requests:
        memory: "256M"
        cpu: "300m"
    # Enabling this will publicly expose your ams-mifos instance.
    # Only enable this if you have security enabled on your cluster
    ingress:
      enabled: false
      annotations: { }

    deployment:
      annotations: { }
      affinity: { }
      nodeSelector: { }
      tolerations: [ ]
      envFrom: [ ]
      # - configMapRef:
      #     name: config-secret
      extraEnvs: [ ]
      # - User that the container will execute as.
      # Not necessary to run as root (0) as the zeebeops Deployment use cases do not need access to Kubernetes Node internals
      # - Typically not necessarily unless running within environments such as OpenShift.
      securityContext:
        runAsUser: 0
        privileged: false
      resources:
        limits:
          memory: "512M"
          cpu: "500m"
        requests:
          memory: "512M"
          cpu: "100m"
        # Allows you to add any config files in /usr/share/
        # such as ph-ee-connector-ams-mifos.yml for deployment
        # ph-ee-connector-ams-mifosConfig: {}
        #   ph-ee-connector-ams-mifos.yml: |

ph_ee_connector_mojaloop:
  enabled: true
  image: docker.io/openmf/ph-ee-connector-mojaloop:v1.5.0
  SPRING_PROFILES_ACTIVE: "bb"
  hostname: "mojaloop.sandbox.mifos.io"
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: mojaloop.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: ph-ee-connector-mojaloop-java
                port:
                  number: 80
    path: "/"
    backend: { }
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: {}
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    extraEnvs: []
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the mojaloop Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as ph-ee-connector-mojaloop-java.yml for deployment
    # ph-ee-connector-mojaloop-javaConfig: {}
    #   ph-ee-connector-mojaloop-java.yml: |
  replicas: 1
  imagePullPolicy: "Always"
  switch:
    quotes:
      host: ""
      service: ""
    als:
      host: ""
      service: ""
    transfers:
      host: ""
      service: ""
    transactions:
      host: ""
      service: ""
    oracle:
      host: ""
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for mojaloop pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for mojaloop container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-connector-mojaloop-javaConfig: ""
  #   ph-ee-connector-mojaloop-java.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the mojaloop Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  # Enabling this will publicly expose your mojaloop instance.
  # Only enable this if you have security enabled on your cluster

mockpayment:
  enabled: true
  ingress:
    enabled: false
    hosts:
      - host: ""
        paths:
          - path: "/"
            backend:
              service:
                name: ph-ee-connector-mock-payment-schema
                port:
                  number: 80
  image: docker.io/openmf/ph-ee-connector-mock-payment-schema:v1.4.0
  replicas: 1
  mockFailure:
    percentage: "0"
  limits:
    memory: "768M"
    cpu: "500m"
  requests:
    memory: "256M"
    cpu: "100m"
  deployment:
    annotations: {}


operations_app:
  enabled: true
  image: docker.io/openmf/ph-ee-operations-app:v1.17.1
  hostname: "ops-bk.sandbox.mifos.io"
  datasource:
    username: "mifos"
    password: "password"
    host: "operationsmysql"
    port: 3306
    schema: "tenants"
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/cors-allow-headers: 'platform-tenantid, x-correlation-id'
      nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE
      nginx.ingress.kubernetes.io/cors-allow-origin: '*'
      nginx.ingress.kubernetes.io/enable-cors: "true"
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: ops-bk.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-operations-app"
                port:
                  number: 80
    path: "/opsapp"
    backend: { }
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the operations_app Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as operations_app.yml for deployment
  replicas: 1
  imagePullPolicy: "Always"
  token_client_channel_secret: ""
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for operations_app pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for operations_app container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # operations_appConfig: ""
  #   operations_app.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the operations_app Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  # Enabling this will publicly expose your operations_app instance.
  # Only enable this if you have security enabled on your cluster

operations_web:
  enabled: true
  image: docker.io/openmf/ph-ee-operations-web:v1.20.0
  hostname: "ops.sandbox.mifos.io"
  ingress:
    enabled: false
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: ops.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-operations-web"
                port:
                  number: 4200
    replicas: 1
    image: docker.io/openmf/ph-ee-operations-web:v1.10.0
    imagePullPolicy: "Always"
    imagePullSecrets: [ ]
    webhost: ""
    livenessProbe:
      httpGet:
        path: /actuator/health/liveness
        port: 9191
      initialDelaySeconds: 120
      periodSeconds: 30
      failureThreshold: 3
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /actuator/health/readiness
        port: 9191
      initialDelaySeconds: 120
      periodSeconds: 30
      failureThreshold: 3
      timeoutSeconds: 5
    # Whether this chart should self-manage its service account, role, and associated role binding.
    managedServiceAccount: true
    # Custom service account override that the pod will use
    serviceAccount: ""
    # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
    serviceAccountAnnotations: { }
    # How long to wait for operations_web pods to stop gracefully
    terminationGracePeriod: 30
    # Extra environment variables for operations_web container.
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # This is the PriorityClass settings as defined in
    # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    priorityClassName: ""
    # ph-ee-operations-web-configConfig: ""
    #   ph-ee-operations-web-config.yml: |
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the operations_web Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Enabling this will publicly expose your operations_web instance.
    # Only enable this if you have security enabled on your cluster
    ingress:
      enabled: false
      path: "/"
      annotations: { }
      backend: { }
    deployment:
      config:
        - name: ph-ee-operations-web-config
          mountPath: "/usr/share/nginx/html/assets/configuration.properties"
          subPath: "configuration.properties"
      annotations: { }
      affinity: { }
      nodeSelector: { }
      tolerations: [ ]
      envFrom: [ ]
      # - configMapRef:
      #     name: config-secret
      extraEnvs: [ ]
      # - User that the container will execute as.
      # Not necessary to run as root (0) as the operation-web Deployment use cases do not need access to Kubernetes Node internals
      # - Typically not necessarily unless running within environments such as OpenShift.
      securityContext:
        runAsUser: 0
        privileged: false
      resources:
        limits:
          memory: "512M"
          cpu: "500m"
        requests:
          memory: "512M"
          cpu: "100m"
            # Allows you to add any config files in /usr/share/
            # such as ph-ee-operations-web.yml for deployment
            # ph-ee-operations-webConfig: {}
          #   ph-ee-operations-web.yml: |

identity:
  hostname: "ops-bk.sandbox.mifos.io"

ph_ee_connector_gsma:
  enabled: true
  image: docker.io/openmf/ph-ee-connector-gsma:v1.3.0
  SPRING_PROFILES_ACTIVE: "bb"
  limits:
    cpu: "500m"
    memory: "512M"
  requests:
    cpu: "100m"
    memory: "256M"
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the gsma Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as ph_ee_connector_gsma.yml for deployment
    # ph_ee_connector_gsmaConfig: {}
    #   ph_ee_connector_gsma.yml: |

  replicas: 1
  imagePullPolicy: "Always"
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for gsma pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for gsma container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph_ee_connector_gsmaConfig: ""
  #   ph_ee_connector_gsma.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the gsma Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"

ph_ee_connector_slcb:
  enabled: false

mpesa:
  enabled: false

roster_connector:
  enabled: false

paygops_connector:
  enabled: false

notifications:
  enabled: true
  image: docker.io/openmf/ph-ee-notifications:v1.4.0
  imagePullPolicy: "Always"
  SPRING_PROFILES_ACTIVE: "bb"
  LOGGING_LEVEL_ROOT: "INFO"
  MESSAGEGATEWAYCONFIG_HOST: "message-gateway"
  NOTIFICATION_LOCAL_HOST: "ph-ee-connector-notifications"
  NOTIFICATION_SUCCESS_ENABLED: "false"
  NOTIFICATION_FAILURE_ENABLED: "true"
  hostname: "notifications.sandbox.mifos.io"
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: notifications.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-connector-notifications"
                port:
                  number: 80
    path: "/notifications"
    backend: { }

  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the notifications Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512"
        cpu: "100m"
        # Allows you to add any config files in /usr/share/
        # such as ph-ee-connector-notifications.yml for deployment
        # ph-ee-connector-notificationsConfig: {}
        #   ph-ee-connector-notifications.yml: |


  replicas: 1
  hostconfig:
    host: "message-gateway"
    port: 80
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for notifications pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for notifications container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-connector-notificationsConfig: ""
  #   ph-ee-connector-notifications.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the notifications Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  # Enabling this will publicly expose your notifications instance.
  # Only enable this if you have security enabled on your cluster

messagegateway:
  enabled: true
  image: docker.io/openmf/message-gateway:v1.2.0
  secret:
    value:
      api_key: "<api_key>"
      project_id: "<project_id>"
    name: ""
    key:
      telerivet_api_key: ""
  hostname: "messagegateway.sandbox.mifos.io"
  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: messagegateway.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "message-gateway"
                port:
                  number: 80
    path: "/messages"
    backend: { }

  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the message-gateway Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as message-gateway.yml for deployment
    # message-gatewayConfig: {}
    #   message-gateway.yml: |


  replicas: 1
  imagePullPolicy: "Always"
  CALLBACKCONFIG_HOST: "ph-ee-connector-notifications"
  HOSTCONFIG_HOST: "message-gateway"
  MYSQL_USERNAME: "mifos"
  MYSQL_PASSWORD: "password"
  DATASOURCE_URL: jdbc:mysql:thin://operationsmysql:3306/messagegateway
  PROVIDERSOURCE_FROMDATABASE: "disabled"
  PROVIDERSOURCE_FROMYML: "enabled"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for message-gateway pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for message-gateway container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-message-gatewayConfig: ""
  #   ph-ee-message-gateway.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the message-gateway Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  # Enabling this will publicly expose your message-gateway instance.
  # Only enable this if you have security enabled on your cluster

importer_es:
  enabled: true
  image: docker.io/openmf/ph-ee-importer-es:v1.14.0
  elasticsearch_sslverification: false
  elasticsearch_security_enabled: false
  reporting:
    enabled: false

  replicas: 1
#  image: docker.io/openmf/ph-ee-importer-es:v1.6.0
  imagePullPolicy: "Always"
  importer_elasticsearch_url: "http://ph-ee-elasticsearch:9200/"

  logging:
    level:
      root: "INFO"
    pattern:
      console: "%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for Zeebe-ops pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for Zeebe-ops container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-zeebe-opsConfig: ""
  #   ph-ee-zeebe-ops.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the Zeebe-ops Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  javaToolOptions: "-Xmx256M"
  deployment:
    annotations: {}

importer_rdbms:
  enabled: true
  image: docker.io/openmf/ph-ee-importer-rdbms:v1.13.1
  LOGGING_LEVEL_ROOT: "DEBUG"

  replicas: 1
#  image: docker.io/openmf/ph-ee-importer-rdbms:v1.7.1
  imagePullPolicy: "Always"
  SPRING_PROFILES_ACTIVE: "local,tenantsConnection"
  datasource:
    username: "mifos"
    password: "password"
    host: "operationsmysql"
    port: 3306
    schema: "tenants"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for importer_rdbms pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for importer_rdbms container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-importer_rdbmsConfig: ""
  #   ph-ee-importer_rdbms.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the importer_rdbms Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  deployment:
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    extraEnvs: []
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the importer_rdbms Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as ph-ee-importer_rdbms.yml for deployment
    # ph-ee-importer_rdbmsConfig: {}
    #   ph-ee-importer_rdbms.yml: |
  javaToolOptions: "-Xmx256M"


keycloak:
  enabled: false

kong:
  enabled: false

integration_test:
  enabled: true
  gradle:
    command: ./gradlew test -Dcucumber.filter.tags="@gov"
  replicas: 1
  image: "docker.io/openmf/ph-ee-integration-test:latest"
  imageTag: v1.4.0-rc.1
  imagePullPolicy: "Never"
  limits:
    cpu: "500m"
    memory: "3Gi"
  requests:
    cpu: "100m"
    memory: "2Gi"
  operations_app:
    contactpoint: "http://ph-ee-operations-app:80"
  bulk_processor:
    contactpoint: "https://ph-ee-connector-bulk:8443"
  channel_connector:
    contactpoint: "https://ph-ee-connector-channel:8443"
  kafka:
    brokers: ""
    topics: ""
    consumerTimeoutMs: ""
  zeebe_operations:
    contactpoint: ""
    no_of_workflows: ""
    thread-count: ""
  max_retry_count: ""
  retry_intervals: ""
  defaults:
    tenant: ""
    authorization: ""
  channel:
    base_url: ""
  loan:
    base_url: ""
  savings:
    base_url: ""

billPay:
  enabled: true
  image: docker.io/openmf/ph-ee-bill-pay:v1.1.0
  hostname: "bill-pay.sandbox.mifos.io"
  stub_hostname: "bill-pay.sandbox.mifos.io"
  SPRING_PROFILES_ACTIVE: "bb,tenants"
  ingress:
    enabled: false
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # - Typically not necessarily unless running within environments such as OpenShift.
  replicas: 1
  imagePullPolicy: "Always"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
      scheme: HTTPS
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
      scheme: HTTPS
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: "billPay"
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  service:
    annotations: {}
  # Only enable this if you have security enabled on your cluster


crm:
  enabled: true
  image: docker.io/openmf/ph-ee-connector-crm:v1.1.0
  hostname: "crm.sandbox.mifos.io"
  stub_hostname: "crm.sandbox.mifos.io"
  SPRING_PROFILES_ACTIVE: "bb,tenants"
  ingress:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/access-control-allow-origin: 'true'
      nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE
      nginx.ingress.kubernetes.io/cors-allow-origin: '*'
      nginx.ingress.kubernetes.io/enable-cors: 'true'
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: crm.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-connector-crm"
                port:
                  number: 8080
    path: "/crm"
    backend: { }
    stub_backend: { }

  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # - Typically not necessarily unless running within environments such as OpenShift.

  replicas: 1
  imagePullPolicy: "Always"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
      scheme: HTTPS
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
      scheme: HTTPS
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: "crm"
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  service:
    annotations: {}
  # Only enable this if you have security enabled on your cluster


ph-ee-connector:
  enabled: true
  image: docker.io/openmf/ph-ee-connector-bulk:v1.1.0
  aws:
    region: "ap-south-1"
    access_key: "aws-access-key"
    secret_key: "aws-secret-key"
  hostname: "connector.sandbox.mifos.io"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/access-control-allow-origin: 'true'
      nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE
      nginx.ingress.kubernetes.io/cors-allow-origin: '*'
      nginx.ingress.kubernetes.io/enable-cors: 'true'
      kubernetes.io/ingress.class: nginx
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: connector.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: ph-ee-connector
                port:
                  number: 80

  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
  replicas: 1

post_installation_job:
  enabled: true

minio:
  enabled: true
  fullnameOverride: "minio"
  resources:
    requests:
      memory: 256Mi
  replicas: 1
  persistence:
    enabled: true
    size: 10Gi
  mode: standalone
  rootUser: root
  rootPassword: password
  buckets:
    - name: paymenthub-ee
      policy: public


account_mapper:
  enabled: true
  image: docker.io/openmf/ph-ee-identity-account-mapper:v1.6.0
  hostname: "identity-mapper.sandbox.mifos.io"
  LOGGING_LEVEL_ROOT: INFO    
  ingress:
    enabled: false
    pathtype: Prefix
    annotations:
      nginx.ingress.kubernetes.io/access-control-allow-origin: 'true'
      nginx.ingress.kubernetes.io/cors-allow-headers: 'x-registering-institution-id'
      nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE
      nginx.ingress.kubernetes.io/cors-allow-origin: '*'
      nginx.ingress.kubernetes.io/enable-cors: 'true'
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: identity-mapper.sandbox.mifos.io
        paths:
        - path: "/"
          backend:
            service:
              name: "ph-ee-identity-account-mapper"
              port:
                number: 80
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
  async:
    core_pool_size: 10
    max_pool_size: 10
    queue_capacity: 100
  account_validation_enabled: "false"
  account_validator_connector: "gsma"
  spring:
    cache:
      time_to_live: 30
      time_to_idle: 30
      max_entries_heap: 1000
      max_byte_off_heap: 10
      max_byte_disk: 10
    datasource:
      url: jdbc:mysql:thin://operationsmysql:3306/identity_account_mapper
      username: mifos
      password: password

camunda-platform:
  connectors:
    enabled: false
  global:
    zeebe: "{{ .Release.Name }}-zeebe"
    elasticsearch:
      disableExporter: true
      host: "ph-ee-elasticsearch"
    identity:
      auth:
        enabled: false

vouchers:
  enabled: true
  paymentadvice: false
  replicas: 1
  image: docker.io/openmf/ph-ee-vouchers:v1.1.0
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: vouchers.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: ph-ee-vouchers
                port:
                  number: 80
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"
  spring:
    datasource:
      url: jdbc:mysql://operationsmysql:3306/voucher_management
      username: mifos
      password: password
  async:
    core_pool_size: 10
    max_pool_size: 10
    queue_capacity: 100
  expiry_time: 60
  payer:
    tenant: rhino
    identifier: 12345678
    identifierType: MSISDN
  salting:
    enabled: true
  identity-account-mapper:
    hostname: "https://ph-ee-identity-mapper:80"
  operations:
    hostname: "http://ph-ee-operations-app:80"
    endpoints:
      transfers: "/api/v1/transfers?size=1&page=0"


operationsmysql:
  fullnameOverride: "operationsmysql"
  image:
    tag: "5.7"
    debug: false
  volumeClaimTemplate:
    storageClassName: "gp2"
  auth:
    database: "tenants"
    username: "mifos"
    password: "password"
    rootPassword: "ethieTieCh8ahv"
  initdbScripts:
    setup.sql: |-
      CREATE DATABASE messagegateway;
      CREATE DATABASE `rhino`;
      CREATE DATABASE `gorilla`;
      CREATE DATABASE `wakanda`;
      CREATE DATABASE `identity_account_mapper`;
      CREATE DATABASE `voucher_management`;
      CREATE DATABASE `pluto`;
      CREATE DATABASE `venus`;
      CREATE DATABASE `jupiter`;
      GRANT ALL PRIVILEGES ON `rhino`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `gorilla`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `wakanda`.* TO 'mifos';
      GRANT ALL ON *.* TO 'root'@'%';
      GRANT ALL PRIVILEGES ON messagegateway.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `identity_account_mapper`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `voucher_management`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `pluto`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `venus`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `jupiter`.* TO 'mifos';

connector_bulk:
  enabled: true
  image: docker.io/openmf/ph-ee-bulk-processor:v1.12.1
  tenant: "rhino,gorilla"
  hostname: bulk-connector.sandbox.mifos.io
  operations_app:
    contactpoint: "http://ph-ee-operations-app:80"
    endpoints:
      batch_transaction: "/api/v1/batch/transactions"
  identity_account_mapper:
    hostname: "http://ph-ee-identity-account-mapper:80"

  ingress:
    enabled: false
    annotations:
      konghq.com/plugins: cors
      kubernetes.io/ingress.class: kong
    tls:
      - secretName: sandbox-secret
    hosts:
      - host: bulk-connector.sandbox.mifos.io
        paths:
          - path: "/"
            backend:
              service:
                name: "ph-ee-connector-bulk"
                port:
                  number: 8443
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"

    affinity: { }
    nodeSelector: { }
    tolerations: [ ]
    envFrom: [ ]
    # - configMapRef:
    #     name: config-secret
    extraEnvs: [ ]
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the connector_bulk Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as ph-ee-connector-bulk.yml for deployment
    # ph-ee-connector-bulkConfig: {}
    #   ph-ee-connector-bulk.yml: |



  replicas: 1
  imagePullPolicy: "Always"
  camel_disable_ssl: true
  channel:
    hostname: ""
  pollingApi:
    timer: "180"
  tenants: ""
  config:
    partylookup:
      enable: false
    approval:
      enable: false
    ordering:
      enable: false
      field: ""
    splitting:
      enable: true
      sub_batch_size: 5
    formatting:
      enable: false
      standard: "DEFAULT"
    mergeback:
      enable: true
    backpressure:
      enable: false
    completion_threshold_check:
      enable: true
      completion_rate: 95
    deduplication:
      enabled: true
  aws:
    access_key: "root"
    secret_key: "password"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for connector_bulk pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for connector_bulk container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-connector-bulkConfig: ""
  #   ph-ee-connector-bulk.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the connector_bulk Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  service:
    annotations:
      konghq.com/protocol: "https"